glue(
"../../../js/2023/svelte/squaryGemeinden/src/assets/data/gemeinden/{countryId}/{id}_{type}"
)
))
pathGeoJson = glue("{path}.geojson")
# pathTopoJson = glue("{path}_topo.json")
if (file.exists(pathGeoJson) && force) {
unlink(pathGeoJson)
write_sf(geo, pathGeoJson)
} else if (!file.exists(pathGeoJson)) {
write_sf(geo, pathGeoJson)
} else{
return()
}
# topojson_write(geo, file = pathTopoJson, overwrite = T)
})
force = T
baseDir = here("data_raw/gemeinden/")
data = map(seq_along(countriesEUSplit), function(i) {
cat(i, "/", length(countriesEUSplit), "\r")
country = countriesEUSplit[[i]]
countryId = names(countriesEUSplit)[[i]]
# download the communes
print(glue("Downloading for: {countryId}"))
op = makePath(here(
glue(
"data_raw/gisco/communes/{countryId}/{countryId}_communes.fgb"
)
))
if (!file.exists(op) | force) {
unlink(op)
communes = giscoR::gisco_get_communes(country = countryId,
epsg = "3035") %>% janitor::clean_names()
st_write(communes, op)
} else{
communes = read_sf(op)
}
# split country
communsSplit = split(communes, communes[["id"]])
dirCountry = here(baseDir, glue("{countryId}"))
if (!dir.exists(dirCountry)) {
shares = map(seq_along(communsSplit), function(j) {
#id
gem = communsSplit[[j]] %>% mutate(type="gem") %>% rename(x = `_ogr_geometry_`)
gemNoGeo = gem %>% st_drop_geometry()
id = gem$id
areaGem = st_area(gem)
# rectangle ---------------------------------------------------------------
# bounding box
bb = st_bbox(gem) %>% st_as_sfc() %>% st_as_sf() %>% bind_cols(gemNoGeo) %>% mutate(type="bb")
# areas
areaBB = st_area(bb)
# how much area of the bb is covered by the shape?
shareSquare = as.numeric(areaGem / areaBB)
# minimum enclosing circle ------------------------------------------------
minimumCircle = st_minimum_bounding_circle(gem) %>% st_geometry() %>% st_as_sf() %>% mutate(type="circle")
areaMinimumCircle = st_area(minimumCircle)
shareCircle = as.numeric(areaGem / areaMinimumCircle)
# make one bb for all the featues -----------------------------------------
bbGeom = st_geometry(bb) %>% st_as_sf()
circleGeom = st_geometry(minimumCircle) %>% st_as_sf()
circleBB = bind_rows(bbGeom, circleGeom) %>% st_union() %>% st_as_sf() %>% mutate(type="all")
dfAll = bind_rows(
gem = gem,
bb = bb,
circle = minimumCircle,
all = circleBB
) %>%
tidyr::fill(names(.)) %>% st_transform(4326)
path = makePath(here(baseDir,
glue("{countryId}/{id}")))
pathGeoJson = glue("{path}.geojson")
unlink(pathGeoJson)
write_sf(dfAll, pathGeoJson)
df = data.frame(
gem_id = id,
country_id = countryId,
name = gem$comm_name,
shareBB = shareSquare,
shareCircle = shareCircle
)
df
})
df_shares = bind_rows(shares)
op_csv =  makePath(here(baseDir,
glue(
"{countryId}/{countryId}_shares.csv"
)))
write_csv(df_shares, op_csv)
}
})
library(giscoR)
library(sf)
library(here)
library(glue)
library(rajudas)
library(lwgeom)
library(geojsonio)
library(tidyverse)
# download countries ------------------------------------------------------
countriesEU = giscoR::gisco_get_countries(region = "Europe")
# split countries ---------------------------------------------------------
countriesEUSplit = split(countriesEU, countriesEU$CNTR_ID)
force = T
baseDir = here("data_raw/gemeinden/")
data = map(seq_along(countriesEUSplit), function(i) {
cat(i, "/", length(countriesEUSplit), "\r")
country = countriesEUSplit[[i]]
countryId = names(countriesEUSplit)[[i]]
# download the communes
print(glue("Downloading for: {countryId}"))
op = makePath(here(
glue(
"data_raw/gisco/communes/{countryId}/{countryId}_communes.fgb"
)
))
if (!file.exists(op) | force) {
unlink(op)
communes = giscoR::gisco_get_communes(country = countryId,
epsg = "3035") %>% janitor::clean_names()
st_write(communes, op)
} else{
communes = read_sf(op)
}
# split country
communsSplit = split(communes, communes[["id"]])
dirCountry = here(baseDir, glue("{countryId}"))
if (!dir.exists(dirCountry)) {
shares = map(seq_along(communsSplit), function(j) {
#id
gem = communsSplit[[j]] %>% mutate(type="gem") %>% rename(x = `_ogr_geometry_`)
gemNoGeo = gem %>% st_drop_geometry()
id = gem$id
areaGem = st_area(gem)
# rectangle ---------------------------------------------------------------
# bounding box
bb = st_bbox(gem) %>% st_as_sfc() %>% st_as_sf() %>% bind_cols(gemNoGeo) %>% mutate(type="bb")
# areas
areaBB = st_area(bb)
# how much area of the bb is covered by the shape?
shareSquare = as.numeric(areaGem / areaBB)
# minimum enclosing circle ------------------------------------------------
minimumCircle = st_minimum_bounding_circle(gem) %>% st_geometry() %>% st_as_sf() %>% mutate(type="circle")
areaMinimumCircle = st_area(minimumCircle)
shareCircle = as.numeric(areaGem / areaMinimumCircle)
# make one bb for all the featues -----------------------------------------
bbGeom = st_geometry(bb) %>% st_as_sf()
circleGeom = st_geometry(minimumCircle) %>% st_as_sf()
circleBB = bind_rows(bbGeom, circleGeom) %>% st_union() %>% st_as_sf() %>% mutate(type="all")
dfAll = bind_rows(
gem = gem,
bb = bb,
circle = minimumCircle,
all = circleBB
) %>%
tidyr::fill(names(.)) %>% st_transform(4326)
path = makePath(here(baseDir,
glue("{countryId}/{id}")))
pathGeoJson = glue("{path}.geojson")
unlink(pathGeoJson)
write_sf(dfAll, pathGeoJson)
df = data.frame(
gem_id = id,
country_id = countryId,
name = gem$comm_name,
shareBB = shareSquare,
shareCircle = shareCircle
)
df
})
df_shares = bind_rows(shares)
op_csv =  makePath(here(baseDir,
glue(
"{countryId}/{countryId}_shares.csv"
)))
write_csv(df_shares, op_csv)
}
})
force = F
baseDir = here("data_raw/gemeinden/")
data = map(seq_along(countriesEUSplit), function(i) {
cat(i, "/", length(countriesEUSplit), "\r")
country = countriesEUSplit[[i]]
countryId = names(countriesEUSplit)[[i]]
# download the communes
print(glue("Downloading for: {countryId}"))
op = makePath(here(
glue(
"data_raw/gisco/communes/{countryId}/{countryId}_communes.fgb"
)
))
if (!file.exists(op) | force) {
unlink(op)
communes = giscoR::gisco_get_communes(country = countryId,
epsg = "3035") %>% janitor::clean_names()
st_write(communes, op)
} else{
communes = read_sf(op)
}
# split country
communsSplit = split(communes, communes[["id"]])
dirCountry = here(baseDir, glue("{countryId}"))
if (!dir.exists(dirCountry)) {
shares = map(seq_along(communsSplit), function(j) {
#id
gem = communsSplit[[j]] %>% mutate(type="gem") %>% rename(x = `_ogr_geometry_`)
gemNoGeo = gem %>% st_drop_geometry()
id = gem$id
areaGem = st_area(gem)
# rectangle ---------------------------------------------------------------
# bounding box
bb = st_bbox(gem) %>% st_as_sfc() %>% st_as_sf() %>% bind_cols(gemNoGeo) %>% mutate(type="bb")
# areas
areaBB = st_area(bb)
# how much area of the bb is covered by the shape?
shareSquare = as.numeric(areaGem / areaBB)
# minimum enclosing circle ------------------------------------------------
minimumCircle = st_minimum_bounding_circle(gem) %>% st_geometry() %>% st_as_sf() %>% mutate(type="circle")
areaMinimumCircle = st_area(minimumCircle)
shareCircle = as.numeric(areaGem / areaMinimumCircle)
# make one bb for all the featues -----------------------------------------
bbGeom = st_geometry(bb) %>% st_as_sf()
circleGeom = st_geometry(minimumCircle) %>% st_as_sf()
circleBB = bind_rows(bbGeom, circleGeom) %>% st_union() %>% st_as_sf() %>% mutate(type="all")
dfAll = bind_rows(
gem = gem,
bb = bb,
circle = minimumCircle,
all = circleBB
) %>%
tidyr::fill(names(.)) %>% st_transform(4326)
path = makePath(here(baseDir,
glue("{countryId}/{id}")))
pathGeoJson = glue("{path}.geojson")
unlink(pathGeoJson)
write_sf(dfAll, pathGeoJson)
df = data.frame(
gem_id = id,
country_id = countryId,
name = gem$comm_name,
shareBB = shareSquare,
shareCircle = shareCircle
)
df
})
df_shares = bind_rows(shares)
op_csv =  makePath(here(baseDir,
glue(
"{countryId}/{countryId}_shares.csv"
)))
write_csv(df_shares, op_csv)
}
})
de = giscoR::gisco_get_communes(country = "DE",
epsg = "3035") %>% janitor::clean_names()
de %>% glimpse
de %>% filter(str_detect(tolower(comm_name), "ham"))
de %>% filter(str_detect(tolower(comm_name), "wands"))
de %>% filter(str_detect(tolower(comm_name), "barm"))
plot(de[0])
de %>% filter(str_detect(tolower(comm_name), "ham")) %>% View
library(googleCloudStorageR)
library(tidyverse)
gcs_auth(json_file = "~/.ssh/googletranslate.json")
gcs_global_bucket("gdatark")
bucket_info = gcs_get_bucket("gdatark")
# upload all the geodata --------------------------------------------------
dirGeo = "~/projects/personal/js/2023/svelte/squaryGemeinden/src/assets/data/gemeinden"
all = dir(dirGeo, "*", full.names = T, recursive = T) %>% str_subset("geojson|csv")
dim(all)
all
# upload all the geodata --------------------------------------------------
dirGeo = here("data_raw/gemeinden/")
all = dir(dirGeo, "*", full.names = T, recursive = T) %>% str_subset("geojson|csv")
length(all)
i = 1
cat(i, "/", length(all),"\r")
p = all[[i]]
p
name = str_match(p, "gemeinden.*")[1,1]
name
# upload all the geodata --------------------------------------------------
dirGeo = here("data_raw/gemeinden")
all = dir(dirGeo, "*", full.names = T, recursive = T) %>% str_subset("geojson|csv")
cat(i, "/", length(all),"\r")
p = all[[i]]
name = str_match(p, "gemeinden(.*)")[1,1]
name
name = str_extract(p, "gemeinden(.*)")[1,1]
name = str_extract(p, "gemeinden(.*)")
name
p
name = str_extract_all(p, "gemeinden(.*)")
name
name = str_match(p, "gemeinden(.*)")
name
p
name = str_match(p, "gemeinden(.*)")
suppressMessages( gcs_upload(file = p, name=name))
p = all[[i]]
p
name = str_match(p, "gemeinden(.*)")
name
name = str_match(p, "gemeinden(.*)")[,2]
name
suppressMessages( gcs_upload(file = p, name=name))
p = all[[i]]
p
name = str_match(p, "gemeinden/(.*)")[,2]
name
walk(seq_along(all), function(i){
cat(i, "/", length(all),"\r")
p = all[[i]]
name = str_match(p, "gemeinden/(.*)")[,2]
suppressMessages( gcs_upload(file = p, name=name))
})
library(here)
library(glue)
library(tidyverse)
library(jsonlite)
# dir ---------------------------------------------------------------------
dirI = here("data_raw/gemeinden/")
files = dir(dirI, "*", full.names = T, recursive = T)
# csv ---------------------------------------------------------------------
csvs = str_subset(files, ".*\\.csv")
csvs %>% length
# one df for each country.
# rows are gemeinden, ids, and shares
dfs = map(csvs, read_csv)
# bind all together
dfAll = bind_rows(dfs)
# make one files for the countries ----------------------------------------
countries = dfAll %>% group_by(country_id) %>% slice_head(n=1) %>% select(country_id)
jsonCountries = toJSON(countries)
opJsonCountries = "../../../js/2023/svelte/squaryGemeinden/src/assets/data/countries.json"
write(jsonCountries, opJsonCountries)
# make one json for each country ------------------------------------------
dfAll %>% split(.$country_id) %>% iwalk(function(d, c){
print(glue("Writing: {c}"))
jsonCountry = toJSON(d, pretty = T)
opJsonCountry = glue("../../../js/2023/svelte/squaryGemeinden/src/assets/data/{c}.json")
write(jsonCountry, opJsonCountry)
})
# make one json for each country ------------------------------------------
dfAll %>% split(.$country_id) %>% iwalk(function(d, c){
print(glue("Writing: {c}"))
jsonCountry = toJSON(d, pretty = T)
opJsonCountry = glue("../../../js/2023/svelte/squaryGemeinden/static/data/{c}.json")
write(jsonCountry, opJsonCountry)
})
walk(seq_along(countriesEUSplit), function(i) {
cat(i, "/", length(countriesEUSplit), "\r")
country = countriesEUSplit[[i]]
countryId = names(countriesEUSplit)[[i]]
# download the communes
print(glue("Downloading for: {countryId}"))
op = makePath(here(
glue(
"data_raw/gisco/communes/{countryId}/{countryId}_communes.fgb"
)
))
if (!file.exists(op) | force) {
unlink(op)
communes = giscoR::gisco_get_communes(country = countryId,
epsg = "3035") %>% janitor::clean_names()
st_write(communes, op)
} else{
communes = read_sf(op)
}
# split country
communsSplit = split(communes, communes[["id"]])
dirCountry = here(baseDir, glue("{countryId}"))
shares = map(seq_along(communsSplit), function(j) {
#id
gem = communsSplit[[j]] %>% mutate(type="gem") %>% st_transform(3857)
id = gem$id[[1]]
path = makePath(here(baseDir,
glue("{countryId}/{id}")))
pathGeoJson = glue("{path}.geojson")
if(file.exists(pathGeoJson)) return()
# rename the geometry column to x
idx_geom_col = which(str_detect(map(gem, ~class(.x)[[1]]) %>% unlist, "sf"))
st_geometry(gem) = "x"
# the area of the gemeinde
areaGem = st_area(gem)
# rectangle ---------------------------------------------------------------
# bounding box
bbCoords = st_bbox(gem)
bb = bbCoords %>% st_as_sfc() %>% st_as_sf() %>% mutate(type="bb")
bbWidth = bbCoords[4] - bbCoords[2]
bbHeight = bbCoords[3] - bbCoords[1]
bbAspectRatio =   bbHeight / bbWidth
# areas
areaBB = st_area(bb)
# how much area of the bb is covered by the shape?
shareSquare = as.numeric(areaGem / areaBB)
# minimum enclosing circle ------------------------------------------------
minimumCircle = st_minimum_bounding_circle(gem) %>% st_geometry() %>% st_as_sf() %>% mutate(type="circle")
areaMinimumCircle = st_area(minimumCircle)
shareCircle = as.numeric(areaGem / areaMinimumCircle)
# make one bb for all the featues -----------------------------------------
bbGeom = st_geometry(bb) %>% st_as_sf()
circleGeom = st_geometry(minimumCircle) %>% st_as_sf()
circleBB = bind_rows(bbGeom, circleGeom) %>% st_union() %>% st_as_sf() %>% mutate(type="all")
dfAll = bind_rows(
gem = gem,
bb = bb,
circle = minimumCircle,
all = circleBB
) %>%
tidyr::fill(names(.)) %>% st_transform(4326)
dfAll  = dfAll %>%
select(id,
comm_id,
comm_name,
type) %>%
mutate(shareBB = shareSquare,
shareCircle = shareCircle,
bbWidth,
bbHeight)
# unlink(pathGeoJson)
write_sf(dfAll, pathGeoJson)
})
})
library(giscoR)
library(sf)
library(here)
library(glue)
library(rajudas)
library(lwgeom)
library(geojsonio)
library(tidyverse)
# download countries ------------------------------------------------------
countriesEU = giscoR::gisco_get_countries(region = "Europe")
# split countries ---------------------------------------------------------
countriesEUSplit = split(countriesEU, countriesEU$CNTR_ID)
force = F
baseDir = here("data_raw/gemeinden/")
walk(seq_along(countriesEUSplit), function(i) {
cat(i, "/", length(countriesEUSplit), "\r")
country = countriesEUSplit[[i]]
countryId = names(countriesEUSplit)[[i]]
# download the communes
print(glue("Downloading for: {countryId}"))
op = makePath(here(
glue(
"data_raw/gisco/communes/{countryId}/{countryId}_communes.fgb"
)
))
if (!file.exists(op) | force) {
unlink(op)
communes = giscoR::gisco_get_communes(country = countryId,
epsg = "3035") %>% janitor::clean_names()
st_write(communes, op)
} else{
communes = read_sf(op)
}
# split country
communsSplit = split(communes, communes[["id"]])
dirCountry = here(baseDir, glue("{countryId}"))
shares = map(seq_along(communsSplit), function(j) {
#id
gem = communsSplit[[j]] %>% mutate(type="gem") %>% st_transform(3857)
id = gem$id[[1]]
path = makePath(here(baseDir,
glue("{countryId}/{id}")))
pathGeoJson = glue("{path}.geojson")
if(file.exists(pathGeoJson)) return()
# rename the geometry column to x
idx_geom_col = which(str_detect(map(gem, ~class(.x)[[1]]) %>% unlist, "sf"))
st_geometry(gem) = "x"
# the area of the gemeinde
areaGem = st_area(gem)
# rectangle ---------------------------------------------------------------
# bounding box
bbCoords = st_bbox(gem)
bb = bbCoords %>% st_as_sfc() %>% st_as_sf() %>% mutate(type="bb")
bbWidth = bbCoords[4] - bbCoords[2]
bbHeight = bbCoords[3] - bbCoords[1]
bbAspectRatio =   bbHeight / bbWidth
# areas
areaBB = st_area(bb)
# how much area of the bb is covered by the shape?
shareSquare = as.numeric(areaGem / areaBB)
# minimum enclosing circle ------------------------------------------------
minimumCircle = st_minimum_bounding_circle(gem) %>% st_geometry() %>% st_as_sf() %>% mutate(type="circle")
areaMinimumCircle = st_area(minimumCircle)
shareCircle = as.numeric(areaGem / areaMinimumCircle)
# make one bb for all the featues -----------------------------------------
bbGeom = st_geometry(bb) %>% st_as_sf()
circleGeom = st_geometry(minimumCircle) %>% st_as_sf()
circleBB = bind_rows(bbGeom, circleGeom) %>% st_union() %>% st_as_sf() %>% mutate(type="all")
dfAll = bind_rows(
gem = gem,
bb = bb,
circle = minimumCircle,
all = circleBB
) %>%
tidyr::fill(names(.)) %>% st_transform(4326)
dfAll  = dfAll %>%
select(id,
comm_id,
comm_name,
type) %>%
mutate(shareBB = shareSquare,
shareCircle = shareCircle,
bbWidth,
bbHeight)
# unlink(pathGeoJson)
write_sf(dfAll, pathGeoJson)
})
})
